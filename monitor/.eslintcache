[{"/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/index.tsx":"1","/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/reportWebVitals.ts":"2","/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/App.tsx":"3","/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/views/index.tsx":"4","/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/components/index.ts":"5","/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/components/controller.tsx":"6","/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/components/controller2.tsx":"7"},{"size":500,"mtime":1608699091127,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1608699091128,"results":"10","hashOfConfig":"9"},{"size":494,"mtime":1610339050890,"results":"11","hashOfConfig":"9"},{"size":12795,"mtime":1610344063296,"results":"12","hashOfConfig":"9"},{"size":53,"mtime":1608699091126,"results":"13","hashOfConfig":"9"},{"size":2829,"mtime":1608699091126,"results":"14","hashOfConfig":"9"},{"size":16985,"mtime":1610338703306,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"67aq13",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/index.tsx",[],["35","36"],"/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/reportWebVitals.ts",[],"/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/App.tsx",["37"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { getCombinedReducer } from 'harmoware-vis';\nimport 'harmoware-vis/scss/harmoware.scss';\nimport './scss/visualize-sample.scss';\nimport Harmoware from './views'\n\nconst store = createStore(getCombinedReducer());\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Harmoware />\n    </Provider>\n  );\n}\n\nexport default App;\n","/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/views/index.tsx",["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],"/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/components/index.ts",[],["62","63"],"/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/components/controller.tsx",["64","65","66","67","68","69","70","71","72","73"],"import * as React from 'react';\nimport {\n  DepotsInput,\n  AddMinutesButton, PlayButton, PauseButton, ReverseButton, ForwardButton,\n  ElapsedTimeRange, ElapsedTimeValue, SpeedRange, SpeedValue, SimulationDateTime,\n  NavigationButton, BasedProps, ClickedObject, RoutePaths\n} from 'harmoware-vis';\n\nconst Controller: React.FC<BasedProps> = (props) => {\n  const { actions, depotsData, viewport, movesbase, movedData, routePaths, clickedObject, animatePause, animateReverse, settime, secperhour, leading, timeBegin, timeLength } = props\n  return (\n    <div className=\"harmovis_controller\">\n      <div className=\"container\">\n        <ul className=\"list-group\">\n          <li><span>コントロールパネル</span>\n            <div className=\"btn-group d-flex\" role=\"group\">\n              {animatePause ?\n                <PlayButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" /> :\n                <PauseButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              }\n              {animateReverse ?\n                <ForwardButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" /> :\n                <ReverseButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              }\n            </div>\n            <div className=\"btn-group d-flex\" role=\"group\">\n              <AddMinutesButton addMinutes={-5} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              <AddMinutesButton addMinutes={-1} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n            </div>\n            <div className=\"btn-group d-flex\" role=\"group\">\n              <AddMinutesButton addMinutes={1} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              <AddMinutesButton addMinutes={5} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n            </div>\n          </li>\n          <li>\n            再現中日時&nbsp;<SimulationDateTime settime={settime} />\n          </li>\n          <li>\n            <label htmlFor=\"ElapsedTimeRange\">経過時間<ElapsedTimeValue settime={settime} timeBegin={timeBegin} timeLength={Math.floor(timeLength)} actions={actions} />秒&nbsp;/&nbsp;全体&nbsp;{Math.floor(timeLength)}&nbsp;秒</label>\n            <ElapsedTimeRange settime={settime} timeLength={Math.floor(timeLength)} timeBegin={timeBegin} min={-leading} actions={actions} id=\"ElapsedTimeRange\" className=\"form-control-range\" />\n          </li>\n          <li>\n            <label htmlFor=\"SpeedRange\">スピード<SpeedValue secperhour={secperhour} actions={actions} />秒/時</label>\n            <SpeedRange secperhour={secperhour} actions={actions} id=\"SpeedRange\" className=\"form-control-range\" />\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Controller","/Users/ruihirano/MyProjects/LabProjects/flow_bata/monitor/src/components/controller2.tsx",["74","75"],"import * as React from 'react';\nimport {\n  MovesInput, DepotsInput, LinemapInput,\n  AddMinutesButton, PlayButton, PauseButton, ReverseButton, ForwardButton,\n  ElapsedTimeRange, ElapsedTimeValue, SpeedRange, SpeedValue, SimulationDateTime,\n  NavigationButton, BasedProps, ClickedObject, RoutePaths\n} from 'harmoware-vis';\nimport { Icon } from 'react-icons-kit';\nimport {\n  ic_delete_forever as icDeleteForever, ic_save as icSave,\n  ic_layers as icLayers, ic_delete as icDelete\n} from 'react-icons-kit/md';\n\ninterface Props extends BasedProps {\n  getMapboxChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getMoveDataChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getMoveOptionChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getMoveOptionArcChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getMoveSvgChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getDepotOptionChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getHeatmapVisible?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getOptionChangeChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getIconChangeChecked?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n  getIconCubeTypeSelected?: (e: React.ChangeEvent<HTMLSelectElement>) => void,\n  iconCubeType: number\n}\n\ninterface State {\n  currentGroupindex: number,\n  routeGroupDisplay: boolean,\n  saveRouteGroup: {\n    clickedObject: ClickedObject[],\n    routePaths: RoutePaths[],\n  }[]\n}\n\nexport default class Controller2 extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      currentGroupindex: 0,\n      routeGroupDisplay: false,\n      saveRouteGroup: [],\n    };\n  }\n\n  clearAllRoute() {\n    this.props.actions.setClicked([]);\n    this.props.actions.setRoutePaths([]);\n    this.setState({ currentGroupindex: 0, routeGroupDisplay: false, saveRouteGroup: [] });\n  }\n\n  saveRouteGroup() {\n    const { clickedObject, routePaths, actions } = this.props;\n    if (clickedObject && routePaths.length > 0) {\n      const { saveRouteGroup } = this.state;\n      const currentGroupindex = saveRouteGroup.length;\n      const routeGroupDisplay = false;\n      this.setState({\n        currentGroupindex,\n        routeGroupDisplay,\n        saveRouteGroup: [\n          ...saveRouteGroup, { clickedObject, routePaths }\n        ]\n      });\n      actions.setClicked([]);\n      actions.setRoutePaths([]);\n    }\n  }\n\n  displayRouteGroup() {\n    const { currentGroupindex, saveRouteGroup } = this.state;\n    if (saveRouteGroup.length > 0) {\n      const { clickedObject, routePaths, actions } = this.props;\n      let displayIndex = currentGroupindex;\n      let routeGroupDisplay = true;\n      if (clickedObject && routePaths.length > 0) {\n        displayIndex = currentGroupindex < (saveRouteGroup.length - 1) ? currentGroupindex + 1 : 0;\n        if (displayIndex === 0) {\n          routeGroupDisplay = false;\n        }\n      }\n      if (routeGroupDisplay) {\n        actions.setClicked(saveRouteGroup[displayIndex].clickedObject);\n        actions.setRoutePaths(saveRouteGroup[displayIndex].routePaths);\n      } else {\n        actions.setClicked([]);\n        actions.setRoutePaths([]);\n      }\n      this.setState({ currentGroupindex: displayIndex, routeGroupDisplay });\n    }\n  }\n\n  deleteRouteGroup() {\n    const { currentGroupindex, routeGroupDisplay, saveRouteGroup } = this.state;\n    if (saveRouteGroup.length > 0 && routeGroupDisplay) {\n      const newSaveRouteGroup = saveRouteGroup.filter(\n        (current: Object, index: number) => index !== currentGroupindex);\n      this.setState({\n        currentGroupindex: 0,\n        routeGroupDisplay: false,\n        saveRouteGroup: [...newSaveRouteGroup]\n      });\n      const { clickedObject, routePaths, actions } = this.props;\n      if (clickedObject && routePaths.length > 0) {\n        actions.setClicked([]);\n        actions.setRoutePaths([]);\n      }\n    }\n  }\n\n  seticonGradation(e: React.ChangeEvent<HTMLInputElement>) {\n    this.props.actions.setIconGradationChange(e.target.checked);\n  }\n\n  listExpansion(id: string) {\n    let obj = document.getElementById(id)?.style;\n    if (obj !== undefined) {\n      obj.display = (obj.display === 'none') ? 'block' : 'none';\n    }\n  }\n\n  render() {\n    const { settime, timeBegin, timeLength, actions, movedData, movesbase,\n      secperhour, animatePause, animateReverse, getMapboxChecked,\n      getMoveDataChecked, getMoveOptionChecked, getMoveOptionArcChecked, getDepotOptionChecked, getHeatmapVisible,\n      getOptionChangeChecked, getIconChangeChecked, getIconCubeTypeSelected, iconCubeType,\n      getMoveSvgChecked, inputFileName, viewport } = this.props;\n\n    const { currentGroupindex, routeGroupDisplay, saveRouteGroup } = this.state;\n    const displayIndex = saveRouteGroup.length ? currentGroupindex + 1 : 0;\n    const { movesFileName, depotsFileName, linemapFileName } = inputFileName;\n\n    return (\n      <div className=\"vis_sample_controller\">\n        <div className=\"container\">\n          <ul className=\"list-group\">\n            <li>\n              <div className=\"vis_sample_input_button_column\">\n                <label htmlFor=\"MovesInput\" className=\"btn btn-outline-light btn-sm w-100\" title='運行データ選択'>\n                  運行データ選択<MovesInput actions={actions} id=\"MovesInput\" />\n                </label>\n                <div>{movesFileName || '選択されていません'}</div>\n              </div>\n            </li>\n            <li></li>\n            <li>\n              <div className=\"vis_sample_input_button_column\">\n                <label htmlFor=\"DepotsInput\" className=\"btn btn-outline-light btn-sm w-100\" title='停留所データ選択'>\n                  停留所データ選択<DepotsInput actions={actions} id=\"DepotsInput\" />\n                </label>\n                <div>{depotsFileName || '選択されていません'}</div>\n              </div>\n            </li>\n            <li></li>\n            <li>\n              <div className=\"vis_sample_input_button_column\">\n                <label htmlFor=\"LinemapInput\" className=\"btn btn-outline-light btn-sm w-100\" title='ラインマップデータ選択'>\n                  ラインマップデータ選択<LinemapInput actions={actions} id=\"LinemapInput\" />\n                </label>\n                <div>{linemapFileName || '選択されていません'}</div>\n              </div>\n            </li>\n            <li></li>\n            <li>\n              <span onClick={this.listExpansion.bind(this, 'expand1')} >\n                <a style={{ 'cursor': 'pointer' }} >▼ 表示切替スイッチパネル</a>\n              </span>\n              <ul className=\"list-group\">\n                <span id=\"expand1\" style={{ 'display': 'none', 'clear': 'both' }}>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"MapboxChecked\" onChange={getMapboxChecked} className=\"harmovis_input_checkbox\" defaultChecked={true} />\n                      <label htmlFor=\"MapboxChecked\" className=\"form-check-label\" title='Mapboxマップ表示'>Mapboxマップ表示</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"MoveDataChecked\" onChange={getMoveDataChecked} className=\"harmovis_input_checkbox\" defaultChecked={true} />\n                      <label htmlFor=\"MoveDataChecked\" className=\"form-check-label\" title='運行データ表示'>運行データ表示</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"IconGradationChecked\" onChange={this.seticonGradation.bind(this)} className=\"harmovis_input_checkbox\" />\n                      <label htmlFor=\"IconGradationChecked\" className=\"form-check-label\" title='アイコン色グラデーション'>アイコン色グラデーション</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"IconChangeChecked\" onChange={getIconChangeChecked} className=\"harmovis_input_checkbox\" defaultChecked={true} />\n                      <label htmlFor=\"IconChangeChecked\" className=\"form-check-label\" title='アイコン表示パターン切替'>アイコン表示パターン切替</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div className=\"form-select\" title='３Ｄアイコン表示タイプ切替'>\n                      <label htmlFor=\"IconCubeTypeSelect\" className=\"form-select-label\">３Ｄアイコン表示タイプ切替</label>\n                      <select id=\"IconCubeTypeSelect\" value={iconCubeType} onChange={getIconCubeTypeSelected} >\n                        <option value=\"0\">SimpleMeshLayer</option>\n                        <option value=\"1\">ScenegraphLayer</option>\n                      </select>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"MoveSvgChecked\" onChange={getMoveSvgChecked} className=\"harmovis_input_checkbox\" />\n                      <label htmlFor=\"MoveSvgChecked\" className=\"form-check-label\" title='運行データSVG表示'>運行データSVG表示</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"MoveOptionChecked\" onChange={getMoveOptionChecked} className=\"harmovis_input_checkbox\" />\n                      <label htmlFor=\"MoveOptionChecked\" className=\"form-check-label\" title='運行データグラフ表示'>運行データグラフ表示</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"MoveOptionArcChecked\" onChange={getMoveOptionArcChecked} className=\"harmovis_input_checkbox\" />\n                      <label htmlFor=\"MoveOptionArcChecked\" className=\"form-check-label\" title='運行データアーチ表示'>運行データアーチ表示</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"DepotOptionChecked\" onChange={getDepotOptionChecked} className=\"harmovis_input_checkbox\" />\n                      <label htmlFor=\"DepotOptionChecked\" className=\"form-check-label\" title='停留所データオプション表示'>停留所データオプション表示</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"OptionChangeChecked\" onChange={getOptionChangeChecked} className=\"harmovis_input_checkbox\" />\n                      <label htmlFor=\"OptionChangeChecked\" className=\"form-check-label\" title='オプション表示パターン切替'>オプション表示パターン切替</label>\n                    </div>\n                  </li>\n                  <li>\n                    <div>\n                      <input type=\"checkbox\" id=\"HeatmapVisible\" onChange={getHeatmapVisible} className=\"harmovis_input_checkbox\" />\n                      <label htmlFor=\"HeatmapVisible\" className=\"form-check-label\" title='ヒートマップ表示'>ヒートマップ表示</label>\n                    </div>\n                  </li>\n                </span>\n              </ul>\n            </li>\n            <li></li>\n            <li><span>ナビゲーションパネル</span>\n              <div className=\"btn-group d-flex\" role=\"group\">\n                <NavigationButton buttonType=\"zoom-in\" actions={actions} viewport={viewport} className=\"btn btn-outline-light btn-sm w-100\" />\n                <NavigationButton buttonType=\"zoom-out\" actions={actions} viewport={viewport} className=\"btn btn-outline-light btn-sm w-100\" />\n                <NavigationButton buttonType=\"compass\" actions={actions} viewport={viewport} className=\"btn btn-outline-light btn-sm w-100\" />\n              </div>\n            </li>\n            <li></li>\n            <li><span>コントロールパネル</span>\n              <div className=\"btn-group d-flex\" role=\"group\">\n                {animatePause ?\n                  <PlayButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" /> :\n                  <PauseButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n                }\n                {animateReverse ?\n                  <ForwardButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" /> :\n                  <ReverseButton actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n                }\n              </div>\n              <div className=\"btn-group d-flex\" role=\"group\">\n                <AddMinutesButton addMinutes={-10} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n                <AddMinutesButton addMinutes={-5} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              </div>\n              <div className=\"btn-group d-flex\" role=\"group\">\n                <AddMinutesButton addMinutes={5} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n                <AddMinutesButton addMinutes={10} actions={actions} className=\"btn btn-outline-light btn-sm w-100\" />\n              </div>\n            </li>\n            <li></li>\n            <li>\n              再現中日時&nbsp;<SimulationDateTime settime={settime} />\n            </li>\n            <li></li>\n            <li title={`${movedData.length} / ${movesbase.length}`}>\n              移動体（表示数/総数）&nbsp;{movedData.length}&nbsp;/&nbsp;{movesbase.length}\n            </li>\n            <li></li>\n            <li>\n              <label htmlFor=\"ElapsedTimeRange\">経過時間\n              <ElapsedTimeValue settime={settime} timeBegin={timeBegin} timeLength={timeLength} actions={actions} />&nbsp;/&nbsp;\n              <input type=\"number\" value={timeLength} onChange={e => actions.setTimeLength(+e.target.value)} className=\"harmovis_input_number\" min={0} max={timeLength} />&nbsp;秒\n              </label>\n              <ElapsedTimeRange settime={settime} timeLength={timeLength} timeBegin={timeBegin} actions={actions} id=\"ElapsedTimeRange\" />\n            </li>\n            <li>\n              <label htmlFor=\"SpeedRange\">スピード<SpeedValue secperhour={secperhour} actions={actions} />秒/時</label>\n              <SpeedRange secperhour={secperhour} actions={actions} id=\"SpeedRange\" />\n            </li>\n            <li></li>\n            <li>\n              開始 UNIX TIME 設定&nbsp;<input type=\"number\" value={timeBegin} onChange={e => actions.setTimeBegin(+e.target.value)} className=\"harmovis_input_number\" />\n            </li>\n            <li>\n              開始 日付&nbsp;{(new Date(timeBegin * 1000)).toLocaleString('ja-JP',\n              { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit', weekday: 'short' })}\n            </li>\n            <li></li>\n            <li>\n              <span onClick={this.listExpansion.bind(this, 'expand2')} >\n                <a style={{ 'cursor': 'pointer' }} >▼ 経路線操作パネル</a>\n              </span>\n              <span id=\"expand2\" style={{ 'display': 'none', 'clear': 'both' }}>\n                <div className=\"btn-group d-flex\" role=\"group\">\n                  <button onClick={this.saveRouteGroup.bind(this)} className=\"btn btn-outline-light btn-sm w-100\" title='SAVE'>\n                    <span className=\"button_span\"><Icon icon={icSave} />&nbsp;SAVE&nbsp;\n                      <span className=\"badge badge-light\">{saveRouteGroup.length}</span>\n                    </span>\n                  </button>\n                  <button onClick={this.displayRouteGroup.bind(this)} className=\"btn btn-outline-light btn-sm w-100\" title='DISPLAY'>\n                    <span className=\"button_span\"><Icon icon={icLayers} />&nbsp;DISPLAY&nbsp;\n                      <span className=\"badge badge-light\">{routeGroupDisplay ? displayIndex : 0}</span>\n                    </span>\n                  </button>\n                </div>\n                <div className=\"btn-group d-flex\" role=\"group\">\n                  <button onClick={this.clearAllRoute.bind(this)} className=\"btn btn-outline-light btn-sm w-100\" title='All Clear'>\n                    <span className=\"button_span\"><Icon icon={icDeleteForever} />&nbsp;All Clear</span>\n                  </button>\n                  <button onClick={this.deleteRouteGroup.bind(this)} className=\"btn btn-outline-light btn-sm w-100\" title='DELETE'>\n                    <span className=\"button_span\"><Icon icon={icDelete} />&nbsp;DELETE</span>\n                  </button>\n                </div>\n              </span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":2,"column":8,"nodeType":"82","messageId":"83","endLine":2,"endColumn":12},{"ruleId":"80","severity":1,"message":"84","line":3,"column":107,"nodeType":"82","messageId":"83","endLine":3,"endColumn":117},{"ruleId":"80","severity":1,"message":"85","line":3,"column":119,"nodeType":"82","messageId":"83","endLine":3,"endColumn":137},{"ruleId":"80","severity":1,"message":"86","line":3,"column":139,"nodeType":"82","messageId":"83","endLine":3,"endColumn":150},{"ruleId":"80","severity":1,"message":"87","line":3,"column":152,"nodeType":"82","messageId":"83","endLine":3,"endColumn":162},{"ruleId":"80","severity":1,"message":"88","line":3,"column":164,"nodeType":"82","messageId":"83","endLine":3,"endColumn":176},{"ruleId":"80","severity":1,"message":"89","line":3,"column":178,"nodeType":"82","messageId":"83","endLine":3,"endColumn":189},{"ruleId":"80","severity":1,"message":"90","line":4,"column":10,"nodeType":"82","messageId":"83","endLine":4,"endColumn":20},{"ruleId":"80","severity":1,"message":"91","line":6,"column":8,"nodeType":"82","messageId":"83","endLine":6,"endColumn":16},{"ruleId":"80","severity":1,"message":"92","line":7,"column":10,"nodeType":"82","messageId":"83","endLine":7,"endColumn":22},{"ruleId":"80","severity":1,"message":"93","line":8,"column":10,"nodeType":"82","messageId":"83","endLine":8,"endColumn":19},{"ruleId":"80","severity":1,"message":"94","line":9,"column":8,"nodeType":"82","messageId":"83","endLine":9,"endColumn":14},{"ruleId":"80","severity":1,"message":"95","line":9,"column":18,"nodeType":"82","messageId":"83","endLine":9,"endColumn":24},{"ruleId":"80","severity":1,"message":"96","line":10,"column":7,"nodeType":"82","messageId":"83","endLine":10,"endColumn":13},{"ruleId":"80","severity":1,"message":"97","line":11,"column":9,"nodeType":"82","messageId":"83","endLine":11,"endColumn":25},{"ruleId":"80","severity":1,"message":"98","line":18,"column":17,"nodeType":"82","messageId":"83","endLine":18,"endColumn":24},{"ruleId":"80","severity":1,"message":"99","line":18,"column":26,"nodeType":"82","messageId":"83","endLine":18,"endColumn":36},{"ruleId":"80","severity":1,"message":"100","line":18,"column":38,"nodeType":"82","messageId":"83","endLine":18,"endColumn":46},{"ruleId":"80","severity":1,"message":"101","line":18,"column":48,"nodeType":"82","messageId":"83","endLine":18,"endColumn":57},{"ruleId":"80","severity":1,"message":"102","line":24,"column":7,"nodeType":"82","messageId":"83","endLine":24,"endColumn":17},{"ruleId":"80","severity":1,"message":"99","line":79,"column":22,"nodeType":"82","messageId":"83","endLine":79,"endColumn":32},{"ruleId":"80","severity":1,"message":"103","line":81,"column":12,"nodeType":"82","messageId":"83","endLine":81,"endColumn":21},{"ruleId":"80","severity":1,"message":"104","line":83,"column":11,"nodeType":"82","messageId":"83","endLine":83,"endColumn":19},{"ruleId":"105","severity":1,"message":"106","line":176,"column":8,"nodeType":"107","endLine":176,"endColumn":10,"suggestions":"108"},{"ruleId":"80","severity":1,"message":"109","line":233,"column":11,"nodeType":"82","messageId":"83","endLine":233,"endColumn":18},{"ruleId":"76","replacedBy":"110"},{"ruleId":"78","replacedBy":"111"},{"ruleId":"80","severity":1,"message":"112","line":3,"column":3,"nodeType":"82","messageId":"83","endLine":3,"endColumn":14},{"ruleId":"80","severity":1,"message":"113","line":6,"column":3,"nodeType":"82","messageId":"83","endLine":6,"endColumn":19},{"ruleId":"80","severity":1,"message":"114","line":6,"column":33,"nodeType":"82","messageId":"83","endLine":6,"endColumn":46},{"ruleId":"80","severity":1,"message":"115","line":6,"column":48,"nodeType":"82","messageId":"83","endLine":6,"endColumn":58},{"ruleId":"80","severity":1,"message":"99","line":10,"column":20,"nodeType":"82","messageId":"83","endLine":10,"endColumn":30},{"ruleId":"80","severity":1,"message":"100","line":10,"column":32,"nodeType":"82","messageId":"83","endLine":10,"endColumn":40},{"ruleId":"80","severity":1,"message":"101","line":10,"column":42,"nodeType":"82","messageId":"83","endLine":10,"endColumn":51},{"ruleId":"80","severity":1,"message":"116","line":10,"column":53,"nodeType":"82","messageId":"83","endLine":10,"endColumn":62},{"ruleId":"80","severity":1,"message":"117","line":10,"column":64,"nodeType":"82","messageId":"83","endLine":10,"endColumn":74},{"ruleId":"80","severity":1,"message":"118","line":10,"column":76,"nodeType":"82","messageId":"83","endLine":10,"endColumn":89},{"ruleId":"119","severity":1,"message":"120","line":167,"column":17,"nodeType":"121","endLine":167,"endColumn":53},{"ruleId":"119","severity":1,"message":"120","line":303,"column":17,"nodeType":"121","endLine":303,"endColumn":53},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'MovesInput' is defined but never used.","'MovesbaseOperation' is defined but never used.","'DepotsLayer' is defined but never used.","'DepotsData' is defined but never used.","'LineMapLayer' is defined but never used.","'LineMapData' is defined but never used.","'Controller' is defined but never used.","'Dropzone' is defined but never used.","'setMovesBase' is defined but never used.","'StaticMap' is defined but never used.","'moment' is defined but never used.","'Moment' is defined but never used.","'DeckGL' is assigned a value but never used.","'ScatterplotLayer' is assigned a value but never used.","'actions' is assigned a value but never used.","'depotsData' is assigned a value but never used.","'viewport' is assigned a value but never used.","'movesbase' is assigned a value but never used.","'createData' is assigned a value but never used.","'movesdata' is assigned a value but never used.","'pickFile' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'actions' and 'props.viewport'. Either include them or remove the dependency array.","ArrayExpression",["124"],"'onHover' is assigned a value but never used.",["122"],["123"],"'DepotsInput' is defined but never used.","'NavigationButton' is defined but never used.","'ClickedObject' is defined but never used.","'RoutePaths' is defined but never used.","'movedData' is assigned a value but never used.","'routePaths' is assigned a value but never used.","'clickedObject' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},"Update the dependencies array to be: [actions, props.viewport]",{"range":"127","text":"128"},[6808,6810],"[actions, props.viewport]"]